class Letter
{
    private let letter: Character;
    private var isVowel: Boolean;
    private var bookMark: Boolean;
    private var transcription : String;
    
    init(letter : Character, isVowel: Boolean, transcription : String)
    {
        self.letter = letter;
        self.isVowel = isVowel;
        self.bookMark = 0;
        self.transcription = transcription;
    }
    
    var Letter: Character
    {
        get { return letter; }
    }
    
    var IsVowel: Boolean
    {
        get { return isVowel;}
    }
    
    var BookMark:Boolean 
    {
        get { return bookMark; } 
        set { bookMark = newValue; }
    }
    
}

class Alphabet
{
   private var letters : [Letter];
    init(letters : [Letter])
    {
        self.letters = letters;
    }
    
}

class Words
{
     var firstWord : String;
     var secondWord : String;
    
    init(firstWord : String, secondWord: String)
    {
        self.firstWord = firstWord;
        self.secondWord = secondWord;
    }
    
    var FirstWord : String
    {
        get { return firstWord;}
        set { self.firstWord = newValue; }
    }
    var SecondWord : String
    {
        get { return secondWord; }
        set { self.secondWord = newValue; }
    }
}
class GeoEngDictionary
{
   var firstAlphabet : Alphabet;
   var secondAlphabet : Alphabet;
     var words:[Words] = [];
   
   init(firstAlphabet: Alphabet, secondAlphabet: Alphabet)
   {
       self.firstAlphabet = firstAlphabet;
       self.secondAlphabet = secondAlphabet;
   }
   
   func AddWords(firstWord: String, secondWord : String)
   {
      words += [Words(firstWord : firstWord,secondWord : secondWord)];
      
   }
   
   func SearchWords(word : String, language : String) -> [Words]
   {
       var getWords: [Words]=[];
       
       for w in words
       {
          if(language == "Eng")
          {
            if (w.FirstWord.rangeOfString(word) != nil)
          
               { getWords += [w];}
           }
           else { 
               if(w.SecondWord.rangeOfString(word) != nil)
               { getWords += [w];}
           }
       }
       return getWords;
   }
   
   func SearchInEngAlphabet(word: String) -> [Words] {
        return SearchWords(word, language: "Eng");
    }
    
    func SearchInGeoAlphabet(word: String) -> [Words] {
        return SearchWords(word,language: "Geo");
    }
    
}

class FillLetters
{
    
    func getGeorgianLetters() -> [Letter]{
        var letters: [Letter] = [];
        letters += [Letter(letter:"ა",isVowel:1,transcription:"a")];
        letters += [Letter(letter:"ბ",isVowel:0,transcription:"b")];
         letters += [Letter(letter:"გ",isVowel:0,transcription:"g")];
       
        return letters;
    }
    
    func getEnglishLetters() -> [Letter]{
        var letters: [Letter] = [];
        letters += [Letter(letter:"a",isVowel: 1,transcription:"a")];
         letters += [Letter(letter:"b",isVowel:0,transcription:"a")]
          letters += [Letter(letter:"c",isVowel:0,transcription:"a")]
       
        return letters;
    }
    
}
 var myletters = FillLetters()
 
 

